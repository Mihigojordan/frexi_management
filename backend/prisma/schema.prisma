// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         String   @id @unique @default(uuid())
  adminName  String?
  adminEmail String?  @unique
  password   String?
  isLocked   Boolean? @default(false)
  blogs Blog[]
  message Message[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User{
  id         String   @id @unique @default(uuid())
  firstname   String?
  lastname   String?
  email  String @unique
  phoneNumber String
  conversation Conversation[]
  message Message[]
  password String
  createdAt  DateTime @default(now())
}

model Testimonial {
  id        String   @id @default(uuid())
  name      String
  position  String? // Optional: Job title, role, or relationshi
  message   String   @db.VarChar(400) // The testimonial content
  rating    Int? // Optional: 1â€“5 star rating
  imageUrl  String? // Optional: Photo of the person
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Destination {
  id               String   @id @default(uuid())
  name             String // Destination name
  country          String // Country name
  city             String? // Optional city
  description      Json // Rich description object
  visaRequirements String? // Visa info
  language         String? // Main language(s)
  currencyUsed     String? // Currency name/symbol
  areaKm2          Float? // Area in square kilometers
  popularSites     Json?
  highlights       Json?
  estimatedBudget  Float? // Estimated budget in your preferred currency
  mainPhotoUrl         String? // Main image
  gallery          Json?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
}
model Tour {
  id               String   @id @default(uuid())
  name             String // Destination name
  country          String // Country name
  city             String? // Optional city
  description      Json // Rich description object
  visaRequirements String? // Visa info
  language         String? // Main language(s)
  currencyUsed     String? // Currency name/symbol
  areaKm2          Float? // Area in square kilometers
  popularSites     Json?
  highlights       Json?
  estimatedBudget  Float? // Estimated budget in your preferred currency
  mainPhotoUrl         String? // Main image
  gallery          Json?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
}

model Partner {
  id            String   @id @default(uuid())
  name          String?
  email         String?   @unique
  phone         String?   @unique
  address       String?
  imageUrl      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Blog {
  id            String   @id @default(uuid())
  title          String?
  description      Json // Rich description object
  imageUrl      String?
  authorId      String?
  author       Admin?    @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


model Conversation {
  id        String    @id @default(uuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id             String      @id @default(uuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderType     SenderType
  senderAdminId  String?      // set if senderType = ADMIN
  senderAdmin    Admin?       @relation(fields: [senderAdminId], references: [id])

  senderUserId   String?      // set if senderType = USER
  senderUser     User?        @relation(fields: [senderUserId], references: [id])

  text           String
  createdAt      DateTime     @default(now())
}

enum SenderType {
  USER
  ADMIN
}
